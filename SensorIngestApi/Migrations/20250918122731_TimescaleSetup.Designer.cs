// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SensorIngestApi.Data;

#nullable disable

namespace SensorIngestApi.Migrations
{
    [DbContext(typeof(TelemetryDbContext))]
    [Migration("20250918122731_TimescaleSetup")]
    partial class TimescaleSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SensorIngestApi.Models.Alert", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Utc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId", "Utc");

                    b.ToTable("alerts", (string)null);
                });

            modelBuilder.Entity("SensorIngestApi.Models.SensorReading", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("TimestampUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("ts");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("device_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id", "TimestampUtc", "DeviceId");

                    b.HasIndex("TimestampUtc")
                        .HasDatabaseName("ix_readings_ts");

                    b.HasIndex("DeviceId", "TimestampUtc")
                        .HasDatabaseName("ix_readings_device_ts");

                    b.ToTable("readings", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
